generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserEntity {
  id        String          @id @default(uuid())

  loginId String
  password  String

  chatrooms  ChatroomEntity[]
  messages  MessageEntity[]
  taggedMessages  TaggedUserEntity[]

  userProfileId   String  @unique
  userProfile     UserProfileEntity @relation(fields: [userProfileId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("User")
}

model UserProfileEntity {
  id        String          @id @default(uuid())
  userId    String          @unique
  user      UserEntity?

  name      String
  phoneNumber     String

  profileImageId  String? @unique
  profileImage    FileEntity? @relation(fields: [profileImageId], references: [id])

  @@map("UserProfile")
}

model ChatroomEntity {
  id        String          @id @default(uuid())
  type ChatroomType
  title      String

  members   UserEntity[]
  chatroomMasterUserId  String

  messages  MessageEntity[]

  chatroomImageId  String? @unique
  chatroomImage    FileEntity? @relation(fields: [chatroomImageId], references: [id])


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Comment")
}

enum ChatroomType {
  GROUP
  ONE_TO_ONE
}

enum MessageType {
  TEXT
  STICKER
}

model StickerEntity {
  id        String          @id @default(uuid())
  name      String
  messages  MessageEntity[]

  fileId  String? @unique
  file    FileEntity? @relation(fields: [fileId], references: [id])

  @@map("Sticker")
}

model MessageEntity {
  id        String          @id @default(uuid())
  type          MessageType @default(TEXT)
  content      String

  chatroomId String
  chatroom  ChatroomEntity   @relation(fields: [chatroomId], references: [id])

  userId  String
  user    UserEntity  @relation(fields: [userId], references: [id])
  
  stickerId     String?
  sticker       StickerEntity?   @relation(fields:[stickerId], references: [id])

  emojiReactions EmojiReactionEntity[]
  taggedUsers      TaggedUserEntity[]

  // Self relation
  referringMessageId  String? @unique
  referringMessage    MessageEntity? @relation("ReferringMessage", fields: [referringMessageId], references: [id])
  // this is only for prisma requirement of self relation
  symmetricMessage     MessageEntity? @relation("ReferringMessage")  
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Message")
}


model TaggedUserEntity {
  id        String          @id @default(uuid())
  messageId String
  message   MessageEntity   @relation(fields: [messageId], references: [id])
  userId    String
  user      UserEntity      @relation(fields: [userId], references: [id])

  @@map("TaggedUser")
}

model EmojiReactionEntity {
  id        String          @id @default(uuid())
  userId    String
  emogiReactionType  EmojiReacitonType

  messageId String
  message  MessageEntity   @relation(fields: [messageId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("EmojiReaction")
}

enum EmojiReacitonType {
  SMILE
  CRYING
}

model FileEntity {
  id           String @id @default(uuid())
  name         String
  originalName String
  path         String
  size         String

  userProfile UserProfileEntity?
  chatroom    ChatroomEntity?
  sticker     StickerEntity?

  createdAt DateTime @default(now())

  @@map("File")
}